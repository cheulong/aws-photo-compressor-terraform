image:
  name: hashicorp/terraform:1.12.0
  entrypoint: [""]

variables:
  TF_ROOT: ""
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY

cache:
  paths:
    - .terraform

before_script:
  - terraform --version
  - cd $TF_ROOT
  - terraform init -backend-config="bucket=cheulong-devops-terraform-state-kljbxs" -backend-config="key=aws-photo-compressor/$TF_ROOT/terraform.tfstate" -backend-config="region=us-east-1"

stages:
  - validate
  # - plan
  # - apply
  # - destroy

validate_dev:
  stage: validate
  variables:
    TF_ROOT: "dev"
  script:
    - echo $CI_COMMIT_SHORT_SHA
    - terraform validate
  # rules:
  #   - changes:
  #       - dev/**

# plan_dev:
#   stage: plan
#   variables:
#     TF_ROOT: "dev"
#   script:
#     - terraform plan -out=tfplan -var-file="terraform.tfvars"
  # rules:
  #   - changes:
  #       - dev/**
#   needs:
#     - validate_dev
#   artifacts:
#     paths:
#       - dev/tfplan

# apply_dev:
#   stage: apply
#   needs:
#     - plan_dev
#   variables:
#     TF_ROOT: "dev"
#   script:
#     - terraform apply -auto-approve tfplan
  # rules:
  #   - changes:
  #       - dev/**
  # when: manual

# ===== Staging =====

# validate_staging:
#   stage: validate
#   variables:
#     TF_ROOT: "staging"
#   script:
#     - terraform validate
#   rules:
#     - if: $CI_COMMIT_BRANCH == 'main'
#       changes:
#         - staging/**

# plan_staging:
#   stage: plan
#   variables:
#     TF_ROOT: "staging"
#   script:
#     - terraform plan -out=tfplan
#   rules:
#     - if: $CI_COMMIT_BRANCH == 'main'
#       changes:
#         - staging/**
#   needs:
#     - validate_staging
#   artifacts:
#     paths:
#       - tfplan

# apply_staging:
#   stage: apply
#   needs:
#     - plan_staging
#   variables:
#     TF_ROOT: "staging"
#   script:
#     - terraform apply -auto-approve tfplan
#   rules:
#     - if: $CI_COMMIT_BRANCH == 'main'
#       changes:
#         - staging/**
#   when: manual

# ===== Production =====

# validate_prod:
#   stage: validate
#   variables:
#     TF_ROOT: "prod"
#   script:
#     - terraform validate
#   rules:
#     - if: $CI_COMMIT_BRANCH == 'main' && $CI_COMMIT_TAG
#       changes:
#         - prod/**

# plan_prod:
#   stage: plan
#   variables:
#     TF_ROOT: "prod"
#   script:
#     - terraform plan -out=tfplan
#   rules:
#     - if: $CI_COMMIT_BRANCH == 'main' && $CI_COMMIT_TAG
#       changes:
#         - prod/**
#   needs:
#     - validate_prod
#   artifacts:
#     paths:
#       - tfplan

# apply_prod:
#   stage: apply
#   needs:
#     - plan_prod
#   variables:
#     TF_ROOT: "prod"
#   script:
#     - terraform apply -auto-approve tfplan
#   rules:
#     - if: $CI_COMMIT_BRANCH == 'main' && $CI_COMMIT_TAG
#       changes:
#         - prod/**
#   when: manual

# ===== Destroy =====

# destroy_dev:
#   stage: destroy
#   variables:
#     TF_ROOT: "dev"
#   script:
#     - terraform destroy --auto-approve
#   when: manual

# destroy_staging:
#   stage: destroy
#   variables:
#     TF_ROOT: "staging"
#   script:
#     - terraform destroy --auto-approve
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#   when: manual

# destroy_prod:
#   stage: destroy
#   variables:
#     TF_ROOT: "prod"
#   script:
#     - terraform destroy --auto-approve
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#   when: manual
